What is oop? full explaination.
OOP stand for object oriented programming language,the main purpose of 
oop is to deal with real world entity using programming language.

OOPS Features:-
i.Class
ii.Object
iii.Inheritance
iv.Polymorphism
v.Encapsulation
vi.Abstraction:1.Class,2.Interface
-----------------------------------------------------------------------------------
Class And Object:-

What is class?
class is a collection of objects and it does't take any space on memory,
class is also called as blueprint/logical entity.
** class ** 
1.Pre-Defined
i.Scanner
ii.console
iii.System
iv.String

2.User - Definied
i.dog
ii.A 
ii.Test
iii.Demo

User-Defined class:-
A class which is create by java programmer called user-Defined class.

Ex:-class "Class-Name"{
    ---------
    //data
    ---------

    --------------
    //methods
    --------------
}
-----------------------------------------------------------------------------------
** Object **
object:-Object is an instance of class that executed the class.
Once the object is created ,it takes up space like other variable in memory.

Syntax:- "ClassName" "ObjectName" =   new    "className" ()
          class-name   obj-reference  DMA    Constructor
--------------- code------------------------------------------
class Demo
{
    int a = 21;
    String name = "Gopal";

    void Show(){
        System.out.println(a+" "+name);
    }
}
class Text
{
    public static void main(String[] args){
        Demo r = new Demo();
        r.Show();
    }
}
-----------output: 21 Gopal -----------------------
-------------------------------------------------------------------
 **Constructor**
 What is Constructor?Full explaination.
 Constructor is a Special type of method whose name is same as class name. 

 Note:- 
i.The main purpose of Constructor is initialize the object.

ii.Every java class has a Constructor.

iii.A Constructor is autometically called at the time of object creation.

iv.A Constructor never contain any return-type including void.

v. class and Constructor name same.

Syntax:-
 class "class-Name"
 {
    "class-Name"()
    {

    }
 }
 

------------------------------code-----------------------------------------
class A 
{
    int a; String name;
    A()
    {
        a=10;
        name = "GopalDas";
    }
    void Show()
    {
        System.out.println(a+" "+name);
    }
}

class B
{
    public static void main(String[] args)
    {
        A ref = new A();
        ref.Show();
    }
}
------------------------output:- 10 GopalDas----------------------------------------------
 Types of Constructor:-
 i.Private
 ii.Default
 iii.Parametrized
 iv.copy
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
1.Default Constructor:-

   What is Default Constructor?
A Constructor which does not have any parameter is called default Constructor.

Syntax:- 
class A
{
    A() //No any parameter
    {

    }
}
---------------------------------------------------------------------------------------
2.Parametrized Constructor:-
   
   What is Parametrized Constructor?
A Constructor through which we can pass one or more parameters is called Parametrized Constructor.

Syntax:-Class A{
    A(int x , String y)
    {

    }
}
-------------------------------------------------------------------------------------------------
3.Copy Constructor

 What is copy Constructor ? full detail
     Whenever we pass object reference to the Constructor then it is called copy Constructor.

Syntax:- class class-Name
{
    class_Name("class_Name"  variable)
    {

    }
}
---------------------------------------------------------------------------------------------------------
4.Private Constructor:-

 What is Private Constructor ?
 In java it is possible to write a Constructor as a private but according to
  the rule we can't access private member outside of class. 

Syntax:- class "class-name"
{
    private "class_Name"()
    {

    }
}
-------------------------------------------------------------------------------
overloading:
-----------
 Definition: Constructor overloading in Java means a class can have multiple 
constructors with the same name (the class name) but different parameter lists 
(different number or type of arguments).

 Why use it?
To initialize objects in different ways.
Provides flexibility (default values, partial initialization, full initialization, etc.).

Rule:
The compiler differentiates constructors by the number and types of parameters 
(not by return type, because constructors donâ€™t have a return type).


Example:
--------
class Student {
    int id;
    String name;

    // Constructor 1: no arguments
    Student() {
        id = 0;
        name = "Unknown";
    }

    // Constructor 2: one argument
    Student(int i) {
        id = i;
        name = "Unknown";
    }

    // Constructor 3: two arguments
    Student(int i, String n) {
        id = i;
        name = n;
    }

    void show() {
        System.out.println(id + " " + name);
    }

    public static void main(String[] args) {
        Student s1 = new Student();            // calls Constructor 1
        Student s2 = new Student(101);         // calls Constructor 2
        Student s3 = new Student(102, "Raj");  // calls Constructor 3

        s1.show();
        s2.show();
        s3.show();
    }
}
---------------------------------------------------------------------------------------------------
static block:
------------
Static block is such kind of block in java which gets executed at the time of loading the .class file into JVM memory..
                                                                           --------------------------------------------------------
A.java -> javac -> A.class -------------run:static block of code --------->|class loader -> Byte code verifier -> Execution engine|JVM
                                                                           --------------------------------------------------------
Syntax:
-----
class A
{
    static
    {
        //code
    }
}
------------------------------------------------------------------------------------------------------------------------
instance block:
-------------
 What is instance block? with Example.
instance block is simiar to method which has no name, it can be written inside a class only but not inside a method.

Note:-
  i.It always executed before constructors.
  ii.We can use Variable only inside the instance block not method.
  iii.We Write time consuming code inside a instance block like - JDBC connectivity.

Syntax:-
  class A 
  {
    {
        //code
    }
  }
------------------------------------------------------------------------------------------
Instance vs Static block :-
---------------------------
Defference between instance & static block ?
instance:- 
  1.It deals with Object.
  2.Executed at the time of Object creation.
  3.No Any keyword required.
  4.Static & non-static variable can  be accessed inside the instance block.

Static:-
  1.It deals with class.
  2.Executed at the time of loaded .class file in JVM.
  3.Static keyWord is required.
  4.Only static variable can be accessed inside the static block.
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
  Inheritance:-
  ------------
What is Inheritance ? full explaination.
 When We Construct a new class from existing class in such a way that
the new class access all the features & properties of existing class called Inheritance. 

Note:-
 i.In,java "extends" keyWord is used to perform Inheritance.
 ii.It Provides code reusability.
 iii.We can't access private members of class through Inheritance.
 iv.A such class contains all the features of super class so,we should create the object of sub class.
 v.Method overriding only possible through Inheritance.

 Syntax:-
     class A 
     {
        // 2 method
     }
     class B extends A 
     {
        //3 method
        // total 5 method
     }

Types of Inheritance :-
---------------------
1.Single / Simple inheritance:- A single class inherits from another single class. This is the most basic form of inheritance, where one subclass extends one superclass.
 | super class -> sub class|one super class and one sub class

2.Multi-level inheritance:-  A chain of inheritance where a class inherits from a class, which in turn inherits from another class.
 |super -> sub1 -> sub2 -> sub3 |

3.Hierarchical Inheritance: Multiple classes inherit from a single parent class. All child classes share the properties and methods of the same parent. 
    sub1 -> superclass1
    sub2 -> same class superclass1
    sub3 -> same class superclass1

4.Multiple Inheritance (via Interfaces):

5.Hybrid Inheritance (via Interfaces and Classes):
---------------------------------------------------------------------------------------------------------------------
1.Simple inheritance: //private ko access nahi kor sakte but protected access kor sakte hai simple inheritance main..
  Syntax:-
   class super
  {
    //code
  }
 class sub extends super
 {
    //code
 }


 2.Multi-level inheritance:- 
  Syntax:
  class super
  {
    //code
  }
  class sub1 extends super 
  {
    //code
  }
 class sub2 extends sub1 
 {
    //code
 }
----------------------------------------------------------------------------------------------------------------------------
 3. Multiple Inheritance:-
  Why java doesn't support multiple inheritance ?
   Whenever a sub class wants to inherit the property of two or more super classes that have same method,java compiler can't decide 
   Which class method it should inherit.
   
   Then their meight be a chance of memory dublication.That is a reason java doesn't support multiple inheritance
   through classes .

Syntax:-
    class A 
    {
        void m1(){
            //code 
        }
    }
    class B 
    {
        void m1(){
            //code 
        }
    }
    class c extends A,B 
    {
        c is in confusion m1 
    }
------------------------------------------------------------------------------------------------------------------------
4.Hierarchical Inheritance:-
  What is Hierarchical inheritance ?
    A inheritance which contain only one super class and multiple sub class and all sub class directly extends super class called 
    Hierarchical inheritance.

Syntax:
  class A 
  {
    //code
  }
  class B extends A 
  {
    //code
  }
  class C extends A 
  {
    //code
  }
------------------------------------------------------------------------------------------------------
Super keyword in java :--
   Super Keyword ? Full explaination.
Super keyWord refers to the objects of super class, it is used when we want to call the super
class variable , method & constructor through sub class object.

Note:-
i.Whenever the super class & sub class variable and method name both are same than it can be used only.
ii.To avoid the confusion between super class and sub classes variables and methods that have same name we should use super keyword.
-------------------------------------------------------------------------------------------------------------------------------------------------
This keyword in java :--
   What is this keyWord ? full explaination.
    i.this keyword refers to the current object inside a method or constructor.
    
    ii.Whenever the name of instance and local variables both are same then our runtime environment JVM gets confused that which
    one is local variable & which one is instance variable, to avoid this problem use this keyword.

    iii.It is also used when we want to call the default Constructor of its own class.

    iv.It also called parameterized constructor of its own class.

---------------------------------- Thank You !  Next file to start Polymorphism in java -------------------------------------